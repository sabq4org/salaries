const { drizzle } = require('drizzle-orm/postgres-js');
const postgres = require('postgres');

// ุงุณุชุฎุฏุงู POSTGRES_URL_NON_POOLING ููุงุชุตุงู ุงููุจุงุดุฑ
const connectionString = "postgres://postgres.fhijotuxhsigcbadknzq:wETzd0ChImYmmUB1@aws-0-us-east-1.pooler.supabase.com:5432/postgres?sslmode=require";

const sql = postgres(connectionString, { max: 1 });
const db = drizzle(sql);

async function setupDatabase() {
  try {
    console.log('๐ ุฌุงุฑู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    
    // ุฅูุดุงุก enum types
    await sql`CREATE TYPE IF NOT EXISTS user_role AS ENUM ('user', 'admin')`;
    await sql`CREATE TYPE IF NOT EXISTS expense_type AS ENUM ('salary', 'operational', 'marketing', 'other')`;
    console.log('โ ุชู ุฅูุดุงุก enum types');

    // ุฌุฏูู ุงููุณุชุฎุฏููู
    await sql`
      CREATE TABLE IF NOT EXISTS users (
        id VARCHAR(64) PRIMARY KEY,
        name TEXT,
        email VARCHAR(320),
        "loginMethod" VARCHAR(64),
        role user_role DEFAULT 'user' NOT NULL,
        "createdAt" TIMESTAMP DEFAULT NOW(),
        "lastSignedIn" TIMESTAMP DEFAULT NOW()
      )
    `;
    console.log('โ ุชู ุฅูุดุงุก ุฌุฏูู users');

    // ุฌุฏูู ุงูููุธููู ุงูุฑุณูููู
    await sql`
      CREATE TABLE IF NOT EXISTS employees (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        position VARCHAR(255),
        "baseSalary" INTEGER NOT NULL DEFAULT 0,
        "socialInsurance" INTEGER NOT NULL DEFAULT 0,
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP DEFAULT NOW(),
        "updatedAt" TIMESTAMP DEFAULT NOW()
      )
    `;
    console.log('โ ุชู ุฅูุดุงุก ุฌุฏูู employees');

    // ุฌุฏูู ุงููุชุนุงูููู
    await sql`
      CREATE TABLE IF NOT EXISTS contractors (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        position VARCHAR(255),
        salary INTEGER NOT NULL DEFAULT 0,
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP DEFAULT NOW(),
        "updatedAt" TIMESTAMP DEFAULT NOW()
      )
    `;
    console.log('โ ุชู ุฅูุดุงุก ุฌุฏูู contractors');

    // ุฌุฏูู ูุณูุฑ ุฑูุงุชุจ ุงูููุธููู ุงูุฑุณูููู
    await sql`
      CREATE TABLE IF NOT EXISTS "employeePayrolls" (
        id SERIAL PRIMARY KEY,
        "employeeId" INTEGER NOT NULL,
        year INTEGER NOT NULL,
        month INTEGER NOT NULL,
        "baseSalary" INTEGER NOT NULL DEFAULT 0,
        "socialInsurance" INTEGER NOT NULL DEFAULT 0,
        deduction INTEGER NOT NULL DEFAULT 0,
        bonus INTEGER NOT NULL DEFAULT 0,
        "netSalary" INTEGER NOT NULL DEFAULT 0,
        "createdAt" TIMESTAMP DEFAULT NOW(),
        "updatedAt" TIMESTAMP DEFAULT NOW()
      )
    `;
    console.log('โ ุชู ุฅูุดุงุก ุฌุฏูู employeePayrolls');

    // ุฌุฏูู ูุณูุฑ ุฑูุงุชุจ ุงููุชุนุงูููู
    await sql`
      CREATE TABLE IF NOT EXISTS "contractorPayrolls" (
        id SERIAL PRIMARY KEY,
        "contractorId" INTEGER NOT NULL,
        year INTEGER NOT NULL,
        month INTEGER NOT NULL,
        salary INTEGER NOT NULL DEFAULT 0,
        deduction INTEGER NOT NULL DEFAULT 0,
        bonus INTEGER NOT NULL DEFAULT 0,
        "netSalary" INTEGER NOT NULL DEFAULT 0,
        "createdAt" TIMESTAMP DEFAULT NOW(),
        "updatedAt" TIMESTAMP DEFAULT NOW()
      )
    `;
    console.log('โ ุชู ุฅูุดุงุก ุฌุฏูู contractorPayrolls');

    // ุฌุฏูู ุงููุตุฑููุงุช ูุงูููุฒุงููุฉ
    await sql`
      CREATE TABLE IF NOT EXISTS expenses (
        id SERIAL PRIMARY KEY,
        year INTEGER NOT NULL,
        month INTEGER NOT NULL,
        type expense_type NOT NULL,
        description TEXT,
        amount INTEGER NOT NULL DEFAULT 0,
        "createdAt" TIMESTAMP DEFAULT NOW(),
        "updatedAt" TIMESTAMP DEFAULT NOW()
      )
    `;
    console.log('โ ุชู ุฅูุดุงุก ุฌุฏูู expenses');

    // ุงูุชุญูู ูู ูุฌูุฏ ุจูุงูุงุช
    const existingEmployees = await sql`SELECT COUNT(*) FROM employees`;
    const count = parseInt(existingEmployees[0].count);
    
    if (count === 0) {
      // ุฅุถุงูุฉ ุจูุงูุงุช ุชุฌุฑูุจูุฉ ููููุธููู
      await sql`
        INSERT INTO employees (name, position, "baseSalary", "socialInsurance", "isActive") VALUES
        ('ุฃุญูุฏ ูุญูุฏ', 'ุฑุฆูุณ ุงูุชุญุฑูุฑ', 15000, 1350, true),
        ('ูุงุทูุฉ ุนูู', 'ูุญุฑุฑุฉ ุฃููู', 12000, 1080, true),
        ('ุฎุงูุฏ ุณุนูุฏ', 'ูุตูู ุฌุฑุงููู', 10000, 900, true),
        ('ููุฑุฉ ุนุจุฏุงููู', 'ูุญุฑุฑุฉ', 9000, 810, true),
        ('ูุญูุฏ ุญุณู', 'ูุตูุฑ ุตุญูู', 8500, 765, true)
      `;
      console.log('โ ุชู ุฅุถุงูุฉ ุจูุงูุงุช ุชุฌุฑูุจูุฉ ููููุธููู');

      // ุฅุถุงูุฉ ุจูุงูุงุช ุชุฌุฑูุจูุฉ ูููุชุนุงูููู
      await sql`
        INSERT INTO contractors (name, position, salary, "isActive") VALUES
        ('ุณุงุฑุฉ ุฅุจุฑุงููู', 'ูุงุชุจุฉ ูุณุชููุฉ', 5000, true),
        ('ุนูุฑ ููุณู', 'ูุตูุฑ ููุชูุบุฑุงูู', 4500, true),
        ('ูููู ุฃุญูุฏ', 'ูุชุฑุฌูุฉ', 4000, true)
      `;
      console.log('โ ุชู ุฅุถุงูุฉ ุจูุงูุงุช ุชุฌุฑูุจูุฉ ูููุชุนุงูููู');
    } else {
      console.log(`โน๏ธ  ููุฌุฏ ุจุงููุนู ${count} ููุธููู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช`);
    }

    console.log('\nโจ ุชู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    throw error;
  } finally {
    await sql.end();
  }
}

setupDatabase();

